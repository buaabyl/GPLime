diff --git a/CMakeLists.txt b/CMakeLists.txt
index 6303fe4..988d49b 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,6 +1,5 @@
-set(CMAKE_USER_MAKE_RULES_OVERRIDE ${CMAKE_CURRENT_SOURCE_DIR}/cmake/c_flag_overrides.cmake)
-set(CMAKE_USER_MAKE_RULES_OVERRIDE_CXX ${CMAKE_CURRENT_SOURCE_DIR}/cmake/cxx_flag_overrides.cmake)
-
+#set(CMAKE_USER_MAKE_RULES_OVERRIDE ${CMAKE_CURRENT_SOURCE_DIR}/cmake/c_flag_overrides.cmake)
+#set(CMAKE_USER_MAKE_RULES_OVERRIDE_CXX ${CMAKE_CURRENT_SOURCE_DIR}/cmake/cxx_flag_overrides.cmake)
 project(rime)
 cmake_minimum_required(VERSION 2.8)
 
@@ -10,12 +9,12 @@ set(LIBRIME_SOVERSION 1)
 add_definitions(-DRIME_VERSION="${LIBRIME_VERSION}")
 
 option(BUILD_SHARED_LIBS "Build Rime as shared library" ON)
-option(BUILD_STATIC "Build Rime using static libraries" OFF)
+option(BUILD_STATIC "Build Rime using static libraries" ON)
 option(BUILD_DATA "Build data for Rime" OFF)
 option(BUILD_TEST "Build and run tests" OFF)
 option(BUILD_SEPARATE_LIBS "Build a separate rime-gears library" OFF)
 option(ENABLE_LOGGING "Enable logging with google-glog library" ON)
-option(BOOST_USE_CXX11 "Boost has been built with C++11 support" OFF)
+option(BOOST_USE_CXX11 "Boost has been built with C++11 support" ON)
 
 SET(RIME_DATA_DIR "/share/rime-data" CACHE STRING "Target directory for Rime data")
 
@@ -36,7 +35,7 @@ set(YamlCpp_STATIC ${BUILD_STATIC})
 
 set(Boost_USE_MULTITHREADED ON)
 if(MSVC)
-  set(Boost_USE_STATIC_RUNTIME ON)
+  set(Boost_USE_STATIC_RUNTIME OFF)
 endif(MSVC)
 find_package(Boost 1.46.0 REQUIRED COMPONENTS filesystem regex signals system)
 if(Boost_FOUND)
diff --git a/cmake/FindGlog.cmake b/cmake/FindGlog.cmake
index 7c40c7b..83142bb 100644
--- a/cmake/FindGlog.cmake
+++ b/cmake/FindGlog.cmake
@@ -17,6 +17,13 @@ if(Glog_FOUND)
   if(NOT Glog_FIND_QUIETLY)
     message(STATUS "Found glog: ${Glog_LIBRARY}")
   endif(NOT Glog_FIND_QUIETLY)
+  if(WIN32)
+    # avoid compile error when include `windows.h` with `glog`
+    if(NOT Glog_FIND_QUIETLY)
+      message(STATUS "  add definition `GLOG_NO_ABBREVIATED_SEVERITIES`")
+    endif(NOT Glog_FIND_QUIETLY)
+    add_definitions(-DGLOG_NO_ABBREVIATED_SEVERITIES)
+  endif(WIN32)
 else(Glog_FOUND)
   if(Glog_FIND_REQUIRED)
     message(FATAL_ERROR "Could not find glog library.")
diff --git a/cmake/FindOpencc.cmake b/cmake/FindOpencc.cmake
index ea7f407..5040613 100644
--- a/cmake/FindOpencc.cmake
+++ b/cmake/FindOpencc.cmake
@@ -17,6 +17,12 @@ if(Opencc_FOUND)
   if(NOT Opencc_FIND_QUIETLY)
     message(STATUS "Found opencc: ${Opencc_LIBRARY}")
   endif(NOT Opencc_FIND_QUIETLY)
+  if (Opencc_STATIC)
+    if(NOT Opencc_FIND_QUIETLY)
+      message(STATUS "  add definition `Opencc_BUILT_AS_STATIC`")
+    endif(NOT Opencc_FIND_QUIETLY)
+    add_definitions(-DOpencc_BUILT_AS_STATIC)
+  endif(Opencc_STATIC)
 else(Opencc_FOUND)
   if(Opencc_FIND_REQUIRED)
     message(FATAL_ERROR "Could not find opencc library.")
diff --git a/src/gear/simplifier.cc b/src/gear/simplifier.cc
index f009e49..818567e 100644
--- a/src/gear/simplifier.cc
+++ b/src/gear/simplifier.cc
@@ -4,8 +4,16 @@
 //
 // 2011-12-12 GONG Chen <chen.sst@gmail.com>
 //
+#include <iostream>
+#include <cstdlib>
 #include <string>
 #include <vector>
+#include <future>
+#include <queue>
+#include <list>
+#include <set>
+#include <boost/variant.hpp>
+#include <boost/optional/optional.hpp>
 #include <boost/algorithm/string.hpp>
 #include <boost/filesystem.hpp>
 #include <opencc/Config.hpp>
