/* vim: set fileencoding=utf-8:
 *
 *                   GNU GENERAL PUBLIC LICENSE
 *                       Version 2, June 1991
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; see the file COPYING.  If not, write to
 * the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 * 
 */
#ifndef LIME_SYLLABLE_H_E3CEC778_18CF_5FF2_469C_B96BCC6D1C94_INCLUDED_
#define LIME_SYLLABLE_H_E3CEC778_18CF_5FF2_469C_B96BCC6D1C94_INCLUDED_

#define MAX_PARSER_PASS         3

typedef struct _lime_syllable_t {
    struct _lime_syllable_t*     next;
    int                             consonant_id;
    int                             vowel_id;
    char                            consonant_str[MAX_PRONOUNCE_LENGTH + 1];
    char                            vowel_str[MAX_PRONOUNCE_LENGTH + 1];
}lime_syllable_t;


//@brief    pinyin keys sequence lexical analysis, positive matching
//@descriptions
//          This implement is max length matching.
//          Accept valid pinyin sequence only,
//          Deny special chars or inputs
//
//@params   keys        user input keys end with '\0'
//@return
lime_syllable_t* lime_lexical_analysis_positive(const char* keys);


//@brief    pinyin keys sequence lexical analysis, reverse matching
//@descriptions
//          This implement is max reverse length matching.
//          Accept valid pinyin sequence only,
//          Deny special chars or inputs
//
//@params   keys        user input keys end with '\0'
//@return
lime_syllable_t* lime_lexical_analysis_reverse(const char* keys);


//TODO:
//@brief    pinyin keys sequence lexical ananlysis, pair as many as possible
lime_syllable_t* lime_lexical_analysis_max_tokens(const char* keys);


//@brief    pair consonant with vowel
//@descriptions
//          modify list directly
//@params   sequences   generated by lexcial analysis
int lime_parser(lime_syllable_t* sequences);


void lime_syllable_dump(lime_syllable_t* result);
void lime_syllable_destroy(lime_syllable_t* sequences);



#endif

